; ModuleID = 'hello'
source_filename = "hello"

@0 = private unnamed_addr constant [12 x i8] c"Hello World\00", align 1

declare i8 @printf(i8* %0, ...)

define i32 @main() {
  %1 = call i8 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i32 0, i32 0))
  ret i32 0
}
void
i32
i8 (i8*, ...)
i8 addrspace(5)*
{ i32, float }
[2 x i8]
<4 x i64>
<vscale x 4 x double>
i1 true
i1 false
i8 -1
i32 1
i64 -1
i128 1208925819614629174706188
i128 -1208925819614629174706188
; ModuleID = 'ops'
source_filename = "ops"

define i32 @opsEx(i32 %a, i32 %b) {
  %c = add i32 %a, %b
  %d = mul i32 %a, %b
  %e = sub i32 %a, %b
  %f = udiv i32 %a, %b
  %g = sdiv i32 %a, %b
  %h = urem i32 %a, %b
  %i = srem i32 %a, %b
  %j = shl i32 %a, %b
  %k = lshr i32 %a, %b
  %l = ashr i32 %a, %b
  %m = and i32 %a, %b
  %n = or i32 %a, %b
  %o = xor i32 %a, %b
  ret i32 0
}

define i32 @mulEx(i32 %a, i32 %b) {
  %d = mul i32 %a, %b
  ret i32 0
}

define float @fopsEx(float %a, float %b) {
  %c = fadd float %a, %b
  %d = fsub float %a, %b
  %e = fmul float %a, %b
  %f = fdiv float %a, %b
  %g = frem float %a, %b
  ret i32 0
}
